/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/helpers/helpers.js":
/*!********************************!*\
  !*** ./src/helpers/helpers.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"Event\": () => (/* binding */ Event),\n/* harmony export */   \"getAttribute\": () => (/* binding */ getAttribute),\n/* harmony export */   \"getSelectData\": () => (/* binding */ getSelectData),\n/* harmony export */   \"generateCustomSelect\": () => (/* binding */ generateCustomSelect)\n/* harmony export */ });\n// helpers\nfunction create(el, classNames, child, parent, ...dataAttr) {\n  let elem = null;\n\n  try {\n    elem = document.createElement(el);\n  } catch (e) {\n    throw new Error('Unable to create HTMLElemnt! Wrong data');\n  }\n\n  if (classNames) elem.classList.add(...classNames.split(' '));\n\n  if (child && Array.isArray(child)) {\n    child.forEach(childElem => childElem && elem.appendChild(childElem));\n  } else if (child && typeof child === 'object') {\n    elem.appendChild(child);\n  } else if (child && typeof child === 'string') {\n    elem.innerHTML = child;\n  }\n\n  if (parent) {\n    parent.appendChild(elem);\n  }\n\n  if (dataAttr.length) {\n    dataAttr.forEach(([attrName, attrValue]) => {\n      if (attrValue === '') {\n        elem.setAttribute(attrName, '');\n      }\n\n      if (attrName.match(/value|id|placeholder|rows|autocorretc|spellcheck|src|alt|type/)) {\n        elem.setAttribute(attrName, attrValue);\n      } else {\n        elem.dataset[attrName] = attrValue;\n      }\n    });\n  }\n\n  return elem;\n}\n\nfunction Event(event, params) {\n  params = params || {\n    bubbles: false,\n    cancelable: false,\n    detail: undefined\n  };\n  const evt = document.createEvent('CustomEvent');\n  evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n  return evt;\n}\n\nconst getAttribute = (element, attrName) => {\n  if (!element || !attrName) return;\n  const attributes = [...element.attributes];\n  const dataAtr = attributes.find(elem => elem.name === attrName);\n  return !dataAtr ? null : dataAtr.value;\n};\n\nconst getDataLevel = option => {\n  if (!option) return 0;\n  return getAttribute(option, 'data-level');\n};\n\nconst getSelectData = select => {\n  const selectOptions = [...select];\n  const optionsArrayData = [];\n  let selectedItems = 0;\n  selectOptions.map((elem, id, arr) => {\n    selectedItems += elem.selected;\n    const level = getDataLevel(elem);\n    const prevLevel = getDataLevel(arr[id - 1]);\n    const obj = {\n      option: elem,\n      select,\n      level,\n      value: elem.value,\n      parent: null,\n      children: [],\n      checked: elem.selected,\n      isExpanded: true,\n      isPartial: false\n    };\n\n    if (!level) {\n      optionsArrayData.push(obj);\n      return;\n    }\n\n    if (level > prevLevel) {\n      obj.parent = optionsArrayData[id - 1];\n      optionsArrayData[id - 1]?.children.push(obj);\n    }\n\n    if (level === prevLevel) {\n      obj.parent = optionsArrayData[id - 1].parent;\n      optionsArrayData[id - 1].parent.children.push(obj);\n    }\n\n    if (level < prevLevel) {\n      obj.parent = optionsArrayData[id - 1].parent.parent;\n      optionsArrayData[id - 1].parent.parent.children.push(obj);\n    }\n\n    optionsArrayData.push(obj);\n  });\n  const selectData = {\n    selectName: select.name,\n    selectedItems\n  };\n  return {\n    optionsArrayData,\n    selectData\n  };\n};\n\nconst generateCustomSelect = (optionsArrayData, {\n  selectName,\n  selectedItems\n}, wrapperDiv) => {\n  const selectDiv = create('div', 'select', null, wrapperDiv);\n  const selectContainerDiv = create('div', 'select-container', null, selectDiv);\n  const titleContainerDiv = create('div', 'title-container', null, selectContainerDiv);\n  const selectTitleP = create('p', 'select__title', null, titleContainerDiv);\n  selectTitleP.innerHTML = selectName;\n  const showSelectedP = create('p', selectedItems ? 'show-selected' : 'show-selected show-selected--hidden', null, titleContainerDiv);\n  showSelectedP.innerHTML = `Показать выбранное (${selectedItems})`;\n  const selectRootDiv = create('div', 'select-root', null, selectContainerDiv);\n  selectRootDiv.innerHTML = 'Код ОКРБ или наименование закупаемой продукции';\n  const customSelectDiv = create('div', 'custom-select custom-select--hidden', null, selectDiv);\n  const searchContainerDiv = create('div', 'search-container', null, customSelectDiv);\n  const searchNavDiv = create('div', 'search__navigation', null, searchContainerDiv);\n  create('img', 'back', null, searchNavDiv, ['src', '../assets/images/ic_backArrow.svg'], ['alt', 'back']);\n  const searchNavP = create('p', null, null, searchNavDiv);\n  searchNavP.innerHTML = 'Реализуемые товары';\n  create('input', 'search__input', null, searchContainerDiv, ['type', 'text'], ['placeholder', 'Код ОКРБ или наименование закупаемой продукции']);\n  const selectItemsContainerDiv = create('div', 'select-items__container', null, customSelectDiv);\n  const selectItemsArray = optionsArrayData.map(elem => {\n    const selectItemContainerDiv = create('div', elem.checked ? 'select-item__container select-item__container--checked' : 'select-item__container', null, null, ['value', elem.value]);\n    if (elem.level) selectItemContainerDiv.dataset.level = elem.level;\n    const selectItemCheckboxDiv = create('div', elem.checked ? 'select-item__checkbox select-item__checkbox--checked' : 'select-item__checkbox', null, selectItemContainerDiv);\n    create('div', 'checkbox-dot checkbox-dot--hidden', null, selectItemCheckboxDiv);\n    create('img', null, null, selectItemCheckboxDiv, ['src', '../assets/images/check.svg'], ['alt', 'check']);\n    const selectItemTextP = create('p', 'select-item__text', null, selectItemContainerDiv);\n    selectItemTextP.innerHTML = elem.option.innerHTML;\n    if (elem.children.length) create('img', 'arrow', null, selectItemTextP, ['src', '../assets/images/Vector.svg'], ['alt', 'arrow']);\n    elem.itemContainer = selectItemContainerDiv;\n    return selectItemContainerDiv;\n  });\n  const selectItemsDiv = create('div', 'select-items', selectItemsArray, selectItemsContainerDiv);\n  const footerDiv = create('div', 'custom-select__footer', null, customSelectDiv);\n  create('button', 'footer__button footer__button--primarily', null, footerDiv).innerHTML = 'Применить';\n  create('button', 'footer__button footer__button--secondary', null, footerDiv).innerHTML = 'Очистить';\n  const checkedRoot = selectItemsDiv.querySelector('.select-item__container--checked');\n  if (checkedRoot) selectRootDiv.innerHTML = checkedRoot.children[1].innerText;else selectRootDiv.classList.add('select-root--empty');\n  return {\n    selectItemsDiv,\n    selectContainerDiv,\n    customSelectDiv\n  };\n};\n\n\n\n//# sourceURL=webpack://ozitag-test/./src/helpers/helpers.js?");

/***/ }),

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/helpers.js */ \"./src/helpers/helpers.js\");\n\nconst select = document.getElementsByTagName('select');\n[...select].forEach(elem => elem.addEventListener('change', e => {\n  console.log(e.target.value);\n}));\n\nconst toggleCheckboxAllChildren = (option, isChecked) => {\n  if (!option.children.length) return;\n  option.children.map(elem => {\n    if (isChecked) {\n      elem.itemContainer?.classList.remove('select-item__container--checked');\n      elem.itemContainer?.children[0]?.classList.remove('select-item__checkbox--checked');\n      elem.checked = false;\n    } else {\n      const dotDiv = elem.parent?.itemContainer?.children[0].children[0];\n      dotDiv?.classList.add('checkbox-dot--hidden');\n      elem.itemContainer?.classList.add('select-item__container--checked');\n      elem.itemContainer?.children[0]?.classList.add('select-item__checkbox--checked');\n      elem.checked = true;\n    }\n\n    toggleCheckboxAllChildren(elem, isChecked);\n    return elem;\n  });\n};\n\nconst toggleCheckboxAllChildrenOnFirstLoad = optionsArrayData => {\n  optionsArrayData.filter(el => el.checked).forEach(option => {\n    if (!option.children.length) return;\n    option.children.map(elem => {\n      const dotDiv = elem.parent?.itemContainer?.children[0].children[0];\n      dotDiv?.classList.add('checkbox-dot--hidden');\n      elem.itemContainer?.classList.add('select-item__container--checked');\n      elem.itemContainer?.children[0]?.classList.add('select-item__checkbox--checked');\n      elem.checked = true;\n      return elem;\n    });\n  });\n};\n\nconst toggleCheckAllParents = option => {\n  if (!option.parent) return;\n  const checkCount = option.parent.children.reduce((acc, b) => acc + b.checked, 0);\n  const childrenCount = option.parent.children.length;\n\n  if (checkCount === childrenCount || option.parent.checked) {\n    option.parent.checked = !option.parent.checked;\n    option.parent.itemContainer.classList.toggle('select-item__container--checked');\n    option.parent.itemContainer.children[0]?.classList.toggle('select-item__checkbox--checked');\n  }\n\n  toggleCheckAllParents(option.parent);\n};\n\nconst togglePartialCheckAllParents = option => {\n  if (!option.parent) return;\n  const dotDiv = option.parent.itemContainer.children[0].children[0];\n\n  if (!option.parent.checked) {\n    dotDiv.classList.remove('checkbox-dot--hidden');\n    option.parent.isPartial = true;\n  } else {\n    dotDiv.classList.add('checkbox-dot--hidden');\n    option.parent.isPartial = false;\n  }\n\n  togglePartialCheckAllParents(option.parent);\n};\n\nconst togglePartialCheckAllParentsOnFirstLoad = optionsArrayData => {\n  optionsArrayData.filter(elem => elem.checked).forEach(el => {\n    togglePartialCheckAllParents(el);\n  });\n};\n\nconst clearAllPartialCheck = option => {\n  if (!option?.parent) return;\n  const dotDiv = option.parent.itemContainer.children[0].children[0];\n  dotDiv.classList.add('checkbox-dot--hidden');\n  clearAllPartialCheck(option.parent);\n};\n\nconst clearEverySinglePartialCheck = optionsArrayData => {\n  const partialCheckArr = optionsArrayData.filter(elem => elem.isPartial);\n  partialCheckArr.forEach(el => {\n    const dotDiv = el.itemContainer.children[0].children[0];\n    dotDiv.classList.add('checkbox-dot--hidden');\n  });\n};\n\nconst doubleCheckAllPartialCheck = optionsArrayData => {\n  const partialCheckArr = optionsArrayData.filter(elem => elem.isPartial);\n  const checkedArr = optionsArrayData.filter(elem => elem.checked);\n  if (!checkedArr.length) return;\n\n  if (partialCheckArr.length) {\n    partialCheckArr.forEach(el => togglePartialCheckAllParents(el));\n  }\n};\n\nconst checkboxHandler = (e, optionsArrayData) => {\n  const checkbox = e.target.closest('.select-item__checkbox');\n  if (!checkbox) return;\n  const itemContainer = checkbox?.closest('.select-item__container');\n  const option = optionsArrayData.find(elem => elem.itemContainer === itemContainer);\n  toggleCheckboxAllChildren(option, option.checked);\n  checkbox?.classList.toggle('select-item__checkbox--checked');\n  itemContainer?.classList.toggle('select-item__container--checked');\n  option.checked = !option.checked;\n  const checkCount = option.parent?.children.reduce((acc, b) => acc + b.checked, 0) || 0;\n  toggleCheckAllParents(option);\n  clearAllPartialCheck(option);\n  if (checkCount) togglePartialCheckAllParents(option);\n  doubleCheckAllPartialCheck(optionsArrayData);\n};\n\nconst toggleExpandAllChildren = (option, isExpanded) => {\n  if (!option.children.length) return;\n  option.children.map(elem => {\n    if (isExpanded) {\n      elem.itemContainer?.classList.add('select-item__container--hidden');\n      elem.isExpanded = false;\n    } else {\n      elem.itemContainer?.classList.remove('select-item__container--hidden');\n      elem.itemContainer?.children[1]?.children[0]?.classList.remove('arrow--closed');\n      elem.isExpanded = true;\n    }\n\n    toggleExpandAllChildren(elem, isExpanded);\n    return elem;\n  });\n};\n\nconst expandHandler = (e, optionsArrayData) => {\n  const arrow = e.target.closest('.arrow');\n  if (!arrow) return;\n  const itemContainer = arrow?.closest('.select-item__container');\n  const option = optionsArrayData.find(elem => elem.itemContainer === itemContainer);\n  if (option.isExpanded) toggleExpandAllChildren(option, true);else toggleExpandAllChildren(option, false);\n  option.isExpanded = !option.isExpanded;\n  arrow.classList.toggle('arrow--closed');\n};\n\nconst backHandler = (e, customSelectDiv) => {\n  const back = e.target.closest('.back');\n  if (!back) return;\n  customSelectDiv.classList.add('custom-select--hidden');\n};\n\nconst unCheckAllOptions = ({\n  selectItemsDiv,\n  optionsArrayData,\n  selectContainerDiv\n}) => {\n  const [...checkedOptionDivs] = selectItemsDiv.querySelectorAll('.select-item__container--checked');\n  const checkedValues = checkedOptionDivs.map(elem => {\n    elem.children[0].classList.remove('select-item__checkbox--checked');\n    elem.classList.remove('select-item__container--checked');\n    return (0,_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getAttribute)(elem, 'value');\n  });\n  optionsArrayData.filter(elem => checkedValues.includes(elem.value)).map(el => {\n    el.select.dispatchEvent(new _helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.Event('change'));\n    el.checked = false;\n    el.option.removeAttribute('selected');\n  });\n  selectContainerDiv.children[1].innerHTML = 'Код ОКРБ или наименование закупаемой продукции';\n  selectContainerDiv.children[1].classList.add('select-root--empty');\n  selectContainerDiv.children[0].children[1].classList.add('show-selected--hidden');\n};\n\nconst clearButtonHandler = (e, args) => {\n  const {\n    optionsArrayData\n  } = args;\n  const clearButton = e.target.closest('.footer__button--secondary');\n  if (!clearButton) return;\n  unCheckAllOptions(args);\n  clearEverySinglePartialCheck(optionsArrayData);\n};\n\nconst submitButtonHandler = (e, customSelectDiv, selectItemsDiv, selectContainerDiv, optionsArrayData) => {\n  const submitButton = e.target.closest('.footer__button--primarily');\n  if (!submitButton) return;\n  const checkedRoot = selectItemsDiv.querySelectorAll('.select-item__container--checked');\n\n  if (!checkedRoot.length) {\n    optionsArrayData.forEach(el => {\n      el.option.removeAttribute('selected');\n      el.select.dispatchEvent(new _helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.Event('change'));\n    });\n    selectContainerDiv.children[1].innerHTML = 'Код ОКРБ или наименование закупаемой продукции';\n    customSelectDiv.classList.add('custom-select--hidden');\n    selectContainerDiv.children[1].classList.add('select-root--empty');\n    selectContainerDiv.children[0].children[1].classList.add('show-selected--hidden');\n    return;\n  }\n\n  ;\n  selectContainerDiv.children[1].innerHTML = checkedRoot[0]?.children[1]?.innerText;\n  selectContainerDiv.children[1].classList.remove('select-root--empty');\n  selectContainerDiv.children[0].children[1].classList.remove('show-selected--hidden');\n  selectContainerDiv.children[0].children[1].innerHTML = `Показать выбранное (${checkedRoot.length})`;\n  customSelectDiv.classList.add('custom-select--hidden');\n  const checkedValues = [...checkedRoot].map(element => (0,_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getAttribute)(element, 'value'));\n  optionsArrayData.filter(elem => checkedValues.includes(elem.value)).forEach(el => {\n    el.option.setAttribute('selected', \"\");\n    el.select.dispatchEvent(new _helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.Event('change'));\n  });\n};\n\nconst clearInputInnerHtml = elem => {\n  let {\n    innerHTML\n  } = elem;\n  innerHTML = innerHTML.replaceAll('<b>', '');\n  innerHTML = innerHTML.replaceAll('</b>', '');\n  elem.innerHTML = innerHTML;\n};\n\nconst searchInputEventHandler = (customSelectDiv, selectItemsDiv) => {\n  const selectItems = [...selectItemsDiv.children];\n  const searchInput = customSelectDiv.querySelector('.search__input');\n  searchInput.addEventListener('input', e => {\n    const searchPhrase = e.target.value;\n    const selectItemsTextArray = selectItems.map(el => el.children[1]);\n    selectItemsTextArray.forEach(elem => {\n      if (!searchPhrase) {\n        clearInputInnerHtml(elem);\n        return;\n      }\n\n      ;\n      clearInputInnerHtml(elem);\n      const {\n        innerHTML\n      } = elem;\n      const newInnerHtml = innerHTML.replaceAll(searchPhrase, `<b>${searchPhrase}</b>`);\n      elem.innerHTML = newInnerHtml;\n    });\n  });\n};\n\nconst customSelectEventHandler = (customSelectDiv, selectItemsDiv, selectContainerDiv, optionsArrayData) => {\n  customSelectDiv.addEventListener('click', e => {\n    checkboxHandler(e, optionsArrayData);\n    expandHandler(e, optionsArrayData);\n    backHandler(e, customSelectDiv);\n    clearButtonHandler(e, {\n      selectItemsDiv,\n      optionsArrayData,\n      selectContainerDiv\n    });\n    submitButtonHandler(e, customSelectDiv, selectItemsDiv, selectContainerDiv, optionsArrayData);\n  });\n  searchInputEventHandler(customSelectDiv, selectItemsDiv);\n};\n\nconst selectContainerEventHandler = (selectContainerDiv, customSelectDiv) => {\n  selectContainerDiv.addEventListener('click', e => {\n    const selectRoot = e.target.closest('.select-root');\n    const showSelected = e.target.closest('.show-selected');\n    if (!selectRoot && !showSelected) return;\n    customSelectDiv.classList.remove('custom-select--hidden');\n  });\n};\n\nconst customeSelect = () => {\n  const selectElements = [...document.getElementsByTagName('select')];\n  const {\n    body\n  } = document;\n  const wrapperDiv = (0,_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.create)('div', 'wrapper', null, body);\n  selectElements.forEach(elem => {\n    const {\n      optionsArrayData,\n      selectData\n    } = (0,_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getSelectData)(elem);\n    const {\n      selectItemsDiv,\n      selectContainerDiv,\n      customSelectDiv\n    } = (0,_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.generateCustomSelect)(optionsArrayData, selectData, wrapperDiv);\n    toggleCheckboxAllChildrenOnFirstLoad(optionsArrayData);\n    togglePartialCheckAllParentsOnFirstLoad(optionsArrayData);\n    customSelectEventHandler(customSelectDiv, selectItemsDiv, selectContainerDiv, optionsArrayData);\n    selectContainerEventHandler(selectContainerDiv, customSelectDiv);\n  });\n};\n\ncustomeSelect();\n\n//# sourceURL=webpack://ozitag-test/./src/script.js?");

/***/ }),

/***/ "./src/assets/sass/style.scss":
/*!************************************!*\
  !*** ./src/assets/sass/style.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://ozitag-test/./src/assets/sass/style.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/script.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/assets/sass/style.scss");
/******/ 	
/******/ })()
;